//Christian Chavez
//Midterm test 3
//date: 3/30/2017
//3350 midterm exam 3 framework
//Write a unit test to check the validity of the getPonderal function. 
//Program equations derived from the following source:
//  https://en.wikipedia.org/wiki/Corpulence_index
#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <cmath>
using namespace std;
double getPonderal(double mass, double height);
#ifdef UTEST
void unit_test(double tolerance);
#endif

int main(int argc, char *argv[])
{
	//Set default values
#ifdef UTEST
    double tol    = 1.0;
#endif
	double mass   = 1.0;
	double height = 1.0;
#ifdef UTEST
    if (argc > 1)
       tol = atof(argv[1]);
    unit_test(tol);
    return 0;
#endif 
	//Get command-line arguments
	if (argc < 3) {
		cout << "No input was detected.                  \n";
		cout << "                                        \n";
		cout << "Program usage: ./program <mass> <height>\n";
		cout << "(default values will be displayed)      \n";
	}
	if (argc > 1)
		mass = atof(argv[1]);
	if (argc > 2)
		height = atof(argv[2]);
	cout << "Ponderal value is: ";
	//This formatting will help for your unit test output
	cout << setw(10) << left << fixed << setprecision(6);
	cout << getPonderal(mass, height) << endl;
	cout << endl;
	return 0;
}

#ifdef UTEST
void unit_test(double tolerance)
{
    int err = 0;
    double mass[] = {135.000000, 
    135.000000,
    135.000000,
    135.000000,
    135.000000,
    135.000000,
    135.000000,
    135.000000,
    135.000000,
    135.000000,
    135.000000,
    135.000000,
    135.000000,
    135.000000,
    135.000000,
    135.000000,
    136.918960,
    136.918960,
    136.918960,
    136.918960,
    136.918960,
    136.918960,
    136.918960,
    136.918960,
    136.918960,
    136.918960,
    136.918960,
    136.918960,
    136.918960,
    136.918960,
    136.918960,
    136.918960,
    138.728600,
    138.728600,
    138.728600,
    138.728600,
    138.728600,
    138.728600,
    138.728600,
    138.728600,
    138.728600,
    138.728600,
    138.728600,
    138.728600,
    138.728600,
    138.728600,
    138.728600,
    138.728600,
    140.754928,
    140.754928,
    140.754928,
    140.754928,
    140.754928,
    140.754928,
    140.754928,
    140.754928,
    140.754928,
    140.754928,
    140.754928,
    140.754928,
    140.754928,
    140.754928,
    140.754928,
    140.754928,
    142.103320,
    142.103320,
    142.103320,
    142.103320,
    142.103320,
    142.103320,
    142.103320,
    142.103320,
    142.103320,
    142.103320,
    142.103320,
    142.103320,
    142.103320,
    142.103320,
    142.103320,
    142.103320,
    144.603311,
    144.603311,
    144.603311,
    144.603311,
    144.603311,
    144.603311,
    144.603311,
    144.603311,
    144.603311,
    144.603311,
    144.603311,
    144.603311,
    144.603311,
    144.603311,
    144.603311,
    144.603311,
    146.991376,
    146.991376,
    146.991376,
    146.991376,
    146.991376,
    146.991376,
    146.991376,
    146.991376,
    146.991376,
    146.991376,
    146.991376,
    146.991376,
    146.991376,
    146.991376,
    146.991376,
    146.991376,
    149.407853,
    149.407853,
    149.407853,
    149.407853,
    149.407853,
    149.407853,
    149.407853,
    149.407853,
    149.407853,
    149.407853,
    149.407853,
    149.407853,
    149.407853,
    149.407853,
    149.407853,
    149.407853,
    150.793751,
    150.793751,
    150.793751,
    150.793751,
    150.793751,
    150.793751,
    150.793751,
    150.793751,
    150.793751,
    150.793751,
    150.793751,
    150.793751,
    150.793751,
    150.793751,
    150.793751,
    150.793751,
    153.086627,
    153.086627,
    153.086627,
    153.086627,
    153.086627,
    153.086627,
    153.086627,
    153.086627,
    153.086627,
    153.086627,
    153.086627,
    153.086627,
    153.086627,
    153.086627,
    153.086627,
    153.086627};
    double height[] = {50.000000, 
    51.591574, 
    53.789234, 
    55.085561, 
    57.237906, 
    59.068861, 
    61.012167, 
    62.782269, 
    65.156561, 
    67.232507, 
    69.142960, 
    70.507290, 
    72.713555, 
    74.314972, 
    75.478185, 
    76.805570, 
    50.000000, 
    51.956328, 
    53.696703, 
    55.135478, 
    56.925596, 
    58.525938, 
    59.950911, 
    62.162497, 
    63.267130, 
    65.056123, 
    66.344444, 
    68.679793, 
    69.776050, 
    71.462603, 
    72.820022, 
    75.173335, 
    50.000000, 
    52.140373, 
    54.141959, 
    55.200879, 
    57.598632, 
    59.680060, 
    61.787862, 
    63.318935, 
    64.567896, 
    66.888009, 
    68.383515, 
    70.723573, 
    72.753578, 
    74.636538, 
    76.924553, 
    79.310508, 
    50.000000, 
    51.723736, 
    54.149115, 
    55.370605, 
    57.332225, 
    59.261620, 
    61.440623, 
    63.111174, 
    64.392473, 
    66.227139, 
    67.481550, 
    68.636306, 
    70.379473, 
    72.856600, 
    74.883268, 
    77.007924, 
    50.000000, 
    51.366619, 
    53.464842, 
    55.655047, 
    57.772655, 
    60.197811, 
    61.980156, 
    63.340249, 
    65.439231, 
    67.890339, 
    70.029941, 
    71.232294, 
    72.349643, 
    73.656625, 
    75.886141, 
    78.019512, 
    50.000000, 
    52.334933, 
    54.831632, 
    57.137442, 
    58.143684, 
    60.034522, 
    61.279220, 
    63.648760, 
    65.187403, 
    67.056548, 
    69.087629, 
    70.883841, 
    72.340284, 
    74.205740, 
    76.327454, 
    77.380586, 
    50.000000, 
    52.246556, 
    54.362273, 
    56.837667, 
    58.583555, 
    60.828572, 
    61.944064, 
    63.316130, 
    64.659836, 
    66.135137, 
    67.482279, 
    69.431887, 
    71.408585, 
    73.865784, 
    75.684944, 
    76.854865, 
    50.000000, 
    51.504527, 
    53.156297, 
    54.673711, 
    56.923576, 
    58.936790, 
    60.659694, 
    62.727825, 
    64.660559, 
    66.281534, 
    68.292439, 
    69.813113, 
    71.726772, 
    73.822866, 
    75.933523, 
    78.314895, 
    50.000000, 
    51.131465, 
    53.447541, 
    54.588152, 
    56.130553, 
    58.020370, 
    59.453537, 
    60.886106, 
    62.170732, 
    63.176100, 
    64.673319, 
    66.328064, 
    68.706460, 
    70.755073, 
    72.783752, 
    74.945162, 
    50.000000, 
    52.190485, 
    53.636418, 
    56.000882, 
    57.748098, 
    58.992233, 
    61.289102, 
    62.984595, 
    64.728561, 
    65.999193, 
    68.090518, 
    69.995182, 
    72.252382, 
    73.519693, 
    75.267482, 
    76.474839 
    };
    double pon[] = {13.572088, 
    13.858594, 
    14.259411, 
    14.487443, 
    14.862144, 
    15.167211, 
    15.498071, 
    15.806396, 
    16.192184, 
    16.534315, 
    16.846072, 
    17.066954, 
    17.421154, 
    17.676009, 
    17.869980, 
    18.068765, 
    13.572088, 
    13.923838, 
    14.243064, 
    14.486187, 
    14.798069, 
    15.074130, 
    15.317828, 
    15.702265, 
    15.887621, 
    16.175540, 
    16.388393, 
    16.770756, 
    16.948747, 
    17.220769, 
    17.448155, 
    17.811857, 
    13.572088, 
    13.956700, 
    14.311637, 
    14.497641, 
    14.924480, 
    15.271657, 
    15.629153, 
    15.886287, 
    16.094510, 
    16.477786, 
    16.722490, 
    17.101838, 
    17.437546, 
    17.726962, 
    18.087421, 
    18.459523, 
    13.582088, 
    13.882252, 
    14.322898, 
    14.527343, 
    14.868456, 
    15.200190, 
    15.570542, 
    15.851517, 
    16.065346, 
    16.369070, 
    16.585121, 
    16.763676, 
    17.046321, 
    17.453994, 
    17.766008, 
    18.100488, 
    13.572088, 
    13.818280, 
    14.192063, 
    14.577052, 
    14.944505, 
    15.359856, 
    15.661563, 
    15.889852, 
    16.238982, 
    16.641992, 
    16.989835, 
    17.183750, 
    17.362980, 
    17.571461, 
    17.924277, 
    18.258657, 
    13.572088, 
    13.991398, 
    14.432917, 
    14.834760, 
    15.018422, 
    15.332067, 
    15.543261, 
    15.941406, 
    16.197294, 
    16.505453, 
    16.837083, 
    17.127665, 
    17.371482, 
    17.658684, 
    17.993702, 
    18.158836, 
    13.572088, 
    13.985642, 
    14.360435, 
    14.782827, 
    15.084022, 
    15.466964, 
    15.655483, 
    15.885818, 
    16.109785, 
    16.353906, 
    16.575240, 
    16.892969, 
    17.212090, 
    17.604710, 
    17.892581, 
    18.076496, 
    13.572088, 
    13.843002, 
    14.137409, 
    14.405191, 
    14.797719, 
    15.144595, 
    15.438324, 
    15.787262, 
    16.109905, 
    16.378032, 
    16.707639, 
    16.954748, 
    17.263182, 
    17.597890, 
    17.931737, 
    18.304713, 
    13.572088, 
    13.776075, 
    14.189001, 
    14.390159, 
    14.659963, 
    14.987194, 
    15.232989, 
    15.476716, 
    15.703651, 
    15.862387, 
    16.112024, 
    16.395696, 
    16.775097, 
    17.106916, 
    17.432364, 
    17.785796, 
    13.572088, 
    13.965642, 
    14.232409, 
    14.637377, 
    14.940270, 
    15.154091, 
    15.544932, 
    15.830315, 
    16.121198, 
    16.331488, 
    16.674690, 
    16.984213, 
    17.347415, 
    17.549677, 
    17.826726, 
    18.016858
    };
    cout << "\nunit test running...\n\n";
    cout << "mass       height     ponderal   returned\n";
    cout << "---------- ---------- ---------- ----------\n";
    for (int i = 0; i < 160; i++) {
        double ponderal = getPonderal(mass[i], height[i]);
        cout << mass[i] << "  ";
        cout << height[i] << "  ";
        cout << pon [i] << "  ";
	    cout << setw(10) << left << fixed << setprecision(6);
        cout << ponderal; 
        if ((pon[i] - tolerance) > ponderal) {
            cout << " <------ outside of tolerance";
            err++;
        }
        cout <<  endl;
    }        
    cout << "\n" << err << " errors found.\nend-of-unit-test\n";
    return;
}
#endif

double getPonderal(double mass, double height)
{
	double oneThird = 1.0 / 3.0;
	double cuberoot = pow(height, oneThird);
	double ponderal = height / cuberoot;
	return ponderal;
}


